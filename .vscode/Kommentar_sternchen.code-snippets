{
	// Place your Java Kurs-Arbeitsbereich snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// Ein Snippet
	"Export function": {
		// Die ersten Buchstaben, die eingegeben werden müssen, um das Snippet zu aktivieren
		"prefix": "stern",
		// Der Inhalt des Snippets besteht aus einer Liste von Codezeilen
		// Mit “${…}” markierte Stellen sind Platzhalter
		// und können später mit Tab der Reihe nach durchgeschaltet werden
		"body": [
			"console.log('**********$1**********');",
			""
		],
		// Beschreibung des Snippets
		"description": "Creates a new export function."
	},
	// Place your Java Kurs-Arbeitsbereich snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// Ein Snippet
	"Array function": {
		// Die ersten Buchstaben, die eingegeben werden müssen, um das Snippet zu aktivieren
		"prefix": "array_personen",
		// Der Inhalt des Snippets besteht aus einer Liste von Codezeilen
		// Mit “${…}” markierte Stellen sind Platzhalter
		// und können später mit Tab der Reihe nach durchgeschaltet werden
		"body": [
			"let mein_personen_array = [",
			"    `Kathrin`,",
			"    `Jens`,",
			"    `Sonja`,",
			"    `Elina`,",
			"    `Maik`,",
			"    `Bente`,",
			"    `Hartmut`,",
			"    `Leon`,",
			"    `Michal`,",
			"    `Laura`",
			"];"
		],
		// Beschreibung des Snippets
		"description": "Creates a new export function."
	},
	"Objekt function": {
		// Die ersten Buchstaben, die eingegeben werden müssen, um das Snippet zu aktivieren
		"prefix": "mein_objekt",
		// Der Inhalt des Snippets besteht aus einer Liste von Codezeilen
		// Mit “${…}” markierte Stellen sind Platzhalter
		// und können später mit Tab der Reihe nach durchgeschaltet werden
		"body": [
			"let mein_objekt = {",
			"vorname: `Laura`,",
			"nachname: `Mustermann`,",
			"alter: `20`",
			"};"
		],
		// Beschreibung des Snippets
		"description": "Creates a new export function."
	},
	"Kommentar function": {
		// Die ersten Buchstaben, die eingegeben werden müssen, um das Snippet zu aktivieren
		"prefix": "Kommentar",
		// Der Inhalt des Snippets besteht aus einer Liste von Codezeilen
		// Mit “${…}” markierte Stellen sind Platzhalter
		// und können später mit Tab der Reihe nach durchgeschaltet werden
		"body": [
			"//////////",
		],
		// Beschreibung des Snippets
		"description": "Creates a new export function."
	},
	/* "Console function": {
		// Die ersten Buchstaben, die eingegeben werden müssen, um das Snippet zu aktivieren
		"prefix": "konsole",
		// Der Inhalt des Snippets besteht aus einer Liste von Codezeilen
		// Mit “${…}” markierte Stellen sind Platzhalter
		// und können später mit Tab der Reihe nach durchgeschaltet werden
		"body": [
			"console.log(`${'$0'} '$0'`);"
		],
		// Beschreibung des Snippets
		"description": "Creates a new export function."
	}, */
	"Array_Zahlen function": {
		// Die ersten Buchstaben, die eingegeben werden müssen, um das Snippet zu aktivieren
		"prefix": "zahlen_array",
		// Der Inhalt des Snippets besteht aus einer Liste von Codezeilen
		// Mit “${…}” markierte Stellen sind Platzhalter
		// und können später mit Tab der Reihe nach durchgeschaltet werden
		"body": [
			"let mein_zahlen_array = [112, 23, 34, 94, 335, 66];"
		],
		// Beschreibung des Snippets
		"description": "Creates a new export function."
	},
	"Generator_Zahlen function": {
		// Die ersten Buchstaben, die eingegeben werden müssen, um das Snippet zu aktivieren
		"prefix": "generator_zahlen",
		// Der Inhalt des Snippets besteht aus einer Liste von Codezeilen
		// Mit “${…}” markierte Stellen sind Platzhalter
		// und können später mit Tab der Reihe nach durchgeschaltet werden
		"body": [
			"let max = 100;",
			"let wert_zahlen = [];",
			"for (let i = 1; i <= 20; i++) {",
			"    wert_zahlen.push(Math.floor(Math.random() * (max - 1 + 1)) + 1);",
			"    while (i == 20) {",
			"        console.log(`Zahlengenerator Wert: ` + wert_zahlen);",
			"        break;",
			"    }",
			"}"
		],
		// Beschreibung des Snippets
		"description": "Creates a new export function.",
	},

"Konsole function": {
	// Die ersten Buchstaben, die eingegeben werden müssen, um das Snippet zu aktivieren
	"prefix": "konsole.log",
	// Der Inhalt des Snippets besteht aus einer Liste von Codezeilen
	// Mit “${…}” markierte Stellen sind Platzhalter
	// und können später mit Tab der Reihe nach durchgeschaltet werden
	"body": [
		"console.log($0);"	
	],
	// Beschreibung des Snippets
	"description": "Creates a new export function.",
}}